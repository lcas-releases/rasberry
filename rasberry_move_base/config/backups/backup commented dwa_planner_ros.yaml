#see http://ros.org/wiki/dwa_local_planner?distro=groovy for param description
DWAPlannerROS:
  #default 2.5 -> with this value the robot sometimes gets to close to the wall when leaving a goal position in narrow corridors, causing dwa planner to have problems


  acc_lim_x: 0.8 #The x acceleration limit of the robot in meters/sec^2
  #acc_limit_trans: 0.8
  acc_lim_y: 0.0 #The y acceleration limit of the robot in meters/sec^2
  #acc_lim_theta: 1.2
  
  
  min_vel_x: 0.00 #The minimum x velocity for the robot in m/s, negative for backwards motion.
  max_vel_x: 1.2 #The maximum x velocity for the robot in m/s.
  min_trans_vel: 0.05 #The absolute value of the minimum translational velocity for the robot in m/s
  max_trans_vel: 1.2 #The absolute value of the maximum translational velocity for the robot in m/s 
  min_vel_y: 0.00 #The minimum y velocity for the robot in m/s
  max_vel_y: 0.8 #The maximum y velocity for the robot in m/s
  max_rot_vel: 1.2 #The absolute value of the maximum rotational velocity for the robot in rad/s
  min_rot_vel: 0.01 #The absolute value of the minimum rotational velocity for the robot in rad/s
  
  
  #rot_stopped_vel: 0.01 #Below what maximum velocity we consider the robot to be stopped in translation", 0.1)
  #trans_stopped_vel: 0.01 #"Below what maximum rotation velocity we consider the robot to be stopped in rotation", 0.1)

  
  vx_samples: 20 #The number of samples to use when exploring the x velocity space
  vy_samples: 1 #The number of samples to use when exploring the y velocity space
  vth_samples: 20 #The number of samples to use when exploring the theta velocity space

  
  yaw_goal_tolerance: 0.1 #The tolerance in radians for the controller in yaw/rotation when achieving its goal

  #default:0.1 -> with this value the robot sometimes has troubles achieving the goal, due to low tolerance
  xy_goal_tolerance: 0.3 #The tolerance in meters for the controller in the x & y distance when achieving a goal

  # if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
  latch_xy_goal_tolerance: true
 

  sim_time: 3.7 #The amount of time to forward-simulate trajectories in seconds
  
#cost =  path_distance_bias * (distance to path from the endpoint of the trajectory in meters)  + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)  + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  path_distance_bias: 5.0 #default:32, previous:5 #The weighting for how much the controller should stay close to the path it was given
  goal_distance_bias: 24.0 #default:24, previous:9 #The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 0.01 #default:0.01 #The weighting for how much the controller should attempt to avoid obstacles
  
  oscillation_reset_dist: 0.15 #How far the robot must travel in meters before oscillation flags are reset
  forward_point_distance: 2.0 #The distance from the center point of the robot to place an additional scoring point, in meters

  prune_plan: true
  holonomic_robot: true
